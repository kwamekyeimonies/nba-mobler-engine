// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createUserAccount = `-- name: CreateUserAccount :one
INSERT INTO "user"(
    id,
    firstName,
    lastName,
    createdAt,
    updateAt,
    deletedAt,
    activatedAt,
    email,
    phoneNumber,
    dateOfBirth,
    password,
    isDeleted
)VALUES(
           $1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12
       )RETURNING id, firstname, lastname, password, createdat, updateat, deletedat, activatedat, email, phonenumber, dateofbirth, isdeleted
`

type CreateUserAccountParams struct {
	ID          uuid.UUID          `json:"id"`
	Firstname   string             `json:"firstname"`
	Lastname    string             `json:"lastname"`
	Createdat   pgtype.Timestamptz `json:"createdat"`
	Updateat    pgtype.Timestamptz `json:"updateat"`
	Deletedat   pgtype.Timestamptz `json:"deletedat"`
	Activatedat pgtype.Timestamptz `json:"activatedat"`
	Email       string             `json:"email"`
	Phonenumber string             `json:"phonenumber"`
	Dateofbirth string             `json:"dateofbirth"`
	Password    string             `json:"password"`
	Isdeleted   pgtype.Bool        `json:"isdeleted"`
}

func (q *Queries) CreateUserAccount(ctx context.Context, arg CreateUserAccountParams) (User, error) {
	row := q.db.QueryRow(ctx, createUserAccount,
		arg.ID,
		arg.Firstname,
		arg.Lastname,
		arg.Createdat,
		arg.Updateat,
		arg.Deletedat,
		arg.Activatedat,
		arg.Email,
		arg.Phonenumber,
		arg.Dateofbirth,
		arg.Password,
		arg.Isdeleted,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Firstname,
		&i.Lastname,
		&i.Password,
		&i.Createdat,
		&i.Updateat,
		&i.Deletedat,
		&i.Activatedat,
		&i.Email,
		&i.Phonenumber,
		&i.Dateofbirth,
		&i.Isdeleted,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, firstname, lastname, password, createdat, updateat, deletedat, activatedat, email, phonenumber, dateofbirth, isdeleted FROM "user" WHERE email=$1 AND isDeleted=FALSE
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Firstname,
		&i.Lastname,
		&i.Password,
		&i.Createdat,
		&i.Updateat,
		&i.Deletedat,
		&i.Activatedat,
		&i.Email,
		&i.Phonenumber,
		&i.Dateofbirth,
		&i.Isdeleted,
	)
	return i, err
}

const getUserByPhone = `-- name: GetUserByPhone :one
SELECT id, firstname, lastname, password, createdat, updateat, deletedat, activatedat, email, phonenumber, dateofbirth, isdeleted FROM "user" WHERE phoneNumber=$1 AND isDeleted=FALSE
`

func (q *Queries) GetUserByPhone(ctx context.Context, phonenumber string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByPhone, phonenumber)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Firstname,
		&i.Lastname,
		&i.Password,
		&i.Createdat,
		&i.Updateat,
		&i.Deletedat,
		&i.Activatedat,
		&i.Email,
		&i.Phonenumber,
		&i.Dateofbirth,
		&i.Isdeleted,
	)
	return i, err
}
