// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: player.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const calculatePlayerAverage = `-- name: CalculatePlayerAverage :one
SELECT
    g.player_id,
    AVG(gs.points) AS avg_points,
    AVG(gs.rebounds) AS avg_rebounds,
    AVG(gs.assists) AS avg_assists,
    AVG(gs.steals) AS avg_steals,
    AVG(gs.blocks) AS avg_blocks,
    AVG(gs.fouls) AS avg_fouls,
    AVG(gs.turn_overs) AS avg_turn_overs,
    AVG(gs.minutes_played) AS avg_minutes_played
FROM
    game_stats gs
        JOIN
    game g ON gs.game_id = g.id
WHERE
    g.player_id = $1
GROUP BY
    g.player_id
`

type CalculatePlayerAverageRow struct {
	PlayerID         uuid.UUID `json:"player_id"`
	AvgPoints        float64   `json:"avg_points"`
	AvgRebounds      float64   `json:"avg_rebounds"`
	AvgAssists       float64   `json:"avg_assists"`
	AvgSteals        float64   `json:"avg_steals"`
	AvgBlocks        float64   `json:"avg_blocks"`
	AvgFouls         float64   `json:"avg_fouls"`
	AvgTurnOvers     float64   `json:"avg_turn_overs"`
	AvgMinutesPlayed float64   `json:"avg_minutes_played"`
}

func (q *Queries) CalculatePlayerAverage(ctx context.Context, playerID uuid.UUID) (CalculatePlayerAverageRow, error) {
	row := q.db.QueryRow(ctx, calculatePlayerAverage, playerID)
	var i CalculatePlayerAverageRow
	err := row.Scan(
		&i.PlayerID,
		&i.AvgPoints,
		&i.AvgRebounds,
		&i.AvgAssists,
		&i.AvgSteals,
		&i.AvgBlocks,
		&i.AvgFouls,
		&i.AvgTurnOvers,
		&i.AvgMinutesPlayed,
	)
	return i, err
}

const createPlayer = `-- name: CreatePlayer :one
INSERT INTO player
(
    id,
    name,
    team,
    team_id,
    created_at
)VALUES (
         $1,$2,$3,$4,NOW()
)RETURNING id, name, team, created_at, updated_at, team_id
`

type CreatePlayerParams struct {
	ID     uuid.UUID `json:"id"`
	Name   string    `json:"name"`
	Team   string    `json:"team"`
	TeamID uuid.UUID `json:"team_id"`
}

func (q *Queries) CreatePlayer(ctx context.Context, arg CreatePlayerParams) (Player, error) {
	row := q.db.QueryRow(ctx, createPlayer,
		arg.ID,
		arg.Name,
		arg.Team,
		arg.TeamID,
	)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Team,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.TeamID,
	)
	return i, err
}

const getAllPlayers = `-- name: GetAllPlayers :many
SELECT id, name, team, created_at, updated_at, team_id FROM player
`

func (q *Queries) GetAllPlayers(ctx context.Context) ([]Player, error) {
	rows, err := q.db.Query(ctx, getAllPlayers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Player{}
	for rows.Next() {
		var i Player
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Team,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.TeamID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllPlayersAverage = `-- name: GetAllPlayersAverage :many
SELECT
    g.player_id,
    AVG(gs.points) AS avg_points,
    AVG(gs.rebounds) AS avg_rebounds,
    AVG(gs.assists) AS avg_assists,
    AVG(gs.steals) AS avg_steals,
    AVG(gs.blocks) AS avg_blocks,
    AVG(gs.fouls) AS avg_fouls,
    AVG(gs.turn_overs) AS avg_turn_overs,
    AVG(gs.minutes_played) AS avg_minutes_played
FROM
    game_stats gs
        JOIN
    game g ON gs.game_id = g.id

GROUP BY
    g.player_id
`

type GetAllPlayersAverageRow struct {
	PlayerID         uuid.UUID `json:"player_id"`
	AvgPoints        float64   `json:"avg_points"`
	AvgRebounds      float64   `json:"avg_rebounds"`
	AvgAssists       float64   `json:"avg_assists"`
	AvgSteals        float64   `json:"avg_steals"`
	AvgBlocks        float64   `json:"avg_blocks"`
	AvgFouls         float64   `json:"avg_fouls"`
	AvgTurnOvers     float64   `json:"avg_turn_overs"`
	AvgMinutesPlayed float64   `json:"avg_minutes_played"`
}

func (q *Queries) GetAllPlayersAverage(ctx context.Context) ([]GetAllPlayersAverageRow, error) {
	rows, err := q.db.Query(ctx, getAllPlayersAverage)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllPlayersAverageRow{}
	for rows.Next() {
		var i GetAllPlayersAverageRow
		if err := rows.Scan(
			&i.PlayerID,
			&i.AvgPoints,
			&i.AvgRebounds,
			&i.AvgAssists,
			&i.AvgSteals,
			&i.AvgBlocks,
			&i.AvgFouls,
			&i.AvgTurnOvers,
			&i.AvgMinutesPlayed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllPlayersByTeamId = `-- name: GetAllPlayersByTeamId :many
SELECT id, name, team, created_at, updated_at, team_id FROM player WHERE team_id=$1
`

func (q *Queries) GetAllPlayersByTeamId(ctx context.Context, teamID uuid.UUID) ([]Player, error) {
	rows, err := q.db.Query(ctx, getAllPlayersByTeamId, teamID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Player{}
	for rows.Next() {
		var i Player
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Team,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.TeamID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPlayerById = `-- name: GetPlayerById :one
SELECT id, name, team, created_at, updated_at, team_id FROM player WHERE id=$1
`

func (q *Queries) GetPlayerById(ctx context.Context, id uuid.UUID) (Player, error) {
	row := q.db.QueryRow(ctx, getPlayerById, id)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Team,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.TeamID,
	)
	return i, err
}
