// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: game_stats.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createGameStats = `-- name: CreateGameStats :one
INSERT INTO game_stats (
    id,
    game_id,
    points,
    rebounds,
    assists,
    steals,
    blocks,
    fouls,
    turn_overs,
    minutes_played,
    created_at
) VALUES (
             $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, NOW()
         ) RETURNING id, game_id, points, rebounds, assists, steals, blocks, fouls, turn_overs, minutes_played, created_at, updated_at
`

type CreateGameStatsParams struct {
	ID            uuid.UUID `json:"id"`
	GameID        uuid.UUID `json:"game_id"`
	Points        int32     `json:"points"`
	Rebounds      int32     `json:"rebounds"`
	Assists       int32     `json:"assists"`
	Steals        int32     `json:"steals"`
	Blocks        int32     `json:"blocks"`
	Fouls         int32     `json:"fouls"`
	TurnOvers     int32     `json:"turn_overs"`
	MinutesPlayed int32     `json:"minutes_played"`
}

func (q *Queries) CreateGameStats(ctx context.Context, arg CreateGameStatsParams) (GameStat, error) {
	row := q.db.QueryRow(ctx, createGameStats,
		arg.ID,
		arg.GameID,
		arg.Points,
		arg.Rebounds,
		arg.Assists,
		arg.Steals,
		arg.Blocks,
		arg.Fouls,
		arg.TurnOvers,
		arg.MinutesPlayed,
	)
	var i GameStat
	err := row.Scan(
		&i.ID,
		&i.GameID,
		&i.Points,
		&i.Rebounds,
		&i.Assists,
		&i.Steals,
		&i.Blocks,
		&i.Fouls,
		&i.TurnOvers,
		&i.MinutesPlayed,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllGameStats = `-- name: GetAllGameStats :many
SELECT id, game_id, points, rebounds, assists, steals, blocks, fouls, turn_overs, minutes_played, created_at, updated_at FROM game_stats
`

func (q *Queries) GetAllGameStats(ctx context.Context) ([]GameStat, error) {
	rows, err := q.db.Query(ctx, getAllGameStats)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GameStat{}
	for rows.Next() {
		var i GameStat
		if err := rows.Scan(
			&i.ID,
			&i.GameID,
			&i.Points,
			&i.Rebounds,
			&i.Assists,
			&i.Steals,
			&i.Blocks,
			&i.Fouls,
			&i.TurnOvers,
			&i.MinutesPlayed,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGameStatsByGameId = `-- name: GetGameStatsByGameId :many
SELECT id, game_id, points, rebounds, assists, steals, blocks, fouls, turn_overs, minutes_played, created_at, updated_at FROM game_stats WHERE game_id = $1
`

func (q *Queries) GetGameStatsByGameId(ctx context.Context, gameID uuid.UUID) ([]GameStat, error) {
	rows, err := q.db.Query(ctx, getGameStatsByGameId, gameID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GameStat{}
	for rows.Next() {
		var i GameStat
		if err := rows.Scan(
			&i.ID,
			&i.GameID,
			&i.Points,
			&i.Rebounds,
			&i.Assists,
			&i.Steals,
			&i.Blocks,
			&i.Fouls,
			&i.TurnOvers,
			&i.MinutesPlayed,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGameStatsById = `-- name: GetGameStatsById :one
SELECT id, game_id, points, rebounds, assists, steals, blocks, fouls, turn_overs, minutes_played, created_at, updated_at FROM game_stats WHERE id = $1
`

func (q *Queries) GetGameStatsById(ctx context.Context, id uuid.UUID) (GameStat, error) {
	row := q.db.QueryRow(ctx, getGameStatsById, id)
	var i GameStat
	err := row.Scan(
		&i.ID,
		&i.GameID,
		&i.Points,
		&i.Rebounds,
		&i.Assists,
		&i.Steals,
		&i.Blocks,
		&i.Fouls,
		&i.TurnOvers,
		&i.MinutesPlayed,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateGameStats = `-- name: UpdateGameStats :one
UPDATE game_stats
SET
    points = $2,
    rebounds = $3,
    assists = $4,
    steals = $5,
    blocks = $6,
    fouls = $7,
    turn_overs = $8,
    minutes_played = $9,
    updated_at = NOW()
WHERE id = $1
RETURNING id, game_id, points, rebounds, assists, steals, blocks, fouls, turn_overs, minutes_played, created_at, updated_at
`

type UpdateGameStatsParams struct {
	ID            uuid.UUID `json:"id"`
	Points        int32     `json:"points"`
	Rebounds      int32     `json:"rebounds"`
	Assists       int32     `json:"assists"`
	Steals        int32     `json:"steals"`
	Blocks        int32     `json:"blocks"`
	Fouls         int32     `json:"fouls"`
	TurnOvers     int32     `json:"turn_overs"`
	MinutesPlayed int32     `json:"minutes_played"`
}

func (q *Queries) UpdateGameStats(ctx context.Context, arg UpdateGameStatsParams) (GameStat, error) {
	row := q.db.QueryRow(ctx, updateGameStats,
		arg.ID,
		arg.Points,
		arg.Rebounds,
		arg.Assists,
		arg.Steals,
		arg.Blocks,
		arg.Fouls,
		arg.TurnOvers,
		arg.MinutesPlayed,
	)
	var i GameStat
	err := row.Scan(
		&i.ID,
		&i.GameID,
		&i.Points,
		&i.Rebounds,
		&i.Assists,
		&i.Steals,
		&i.Blocks,
		&i.Fouls,
		&i.TurnOvers,
		&i.MinutesPlayed,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
