// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: teams.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const calclulateAverateByTeam = `-- name: CalclulateAverateByTeam :one
SELECT
    t.name AS team_name,
    AVG(gs.points) AS avg_points,
    AVG(gs.rebounds) AS avg_rebounds,
    AVG(gs.assists) AS avg_assists,
    AVG(gs.steals) AS avg_steals,
    AVG(gs.blocks) AS avg_blocks,
    AVG(gs.fouls) AS avg_fouls,
    AVG(gs.turn_overs) AS avg_turn_overs,
    AVG(gs.minutes_played) AS avg_minutes_played
FROM
    game_stats gs
        JOIN
    game g ON gs.game_id = g.id
        JOIN
    player p ON g.player_id = p.id
        JOIN
    teams t ON p.team_id = t.id
WHERE
    t.id = '$1'
GROUP BY
    t.name
`

type CalclulateAverateByTeamRow struct {
	TeamName         string  `json:"team_name"`
	AvgPoints        float64 `json:"avg_points"`
	AvgRebounds      float64 `json:"avg_rebounds"`
	AvgAssists       float64 `json:"avg_assists"`
	AvgSteals        float64 `json:"avg_steals"`
	AvgBlocks        float64 `json:"avg_blocks"`
	AvgFouls         float64 `json:"avg_fouls"`
	AvgTurnOvers     float64 `json:"avg_turn_overs"`
	AvgMinutesPlayed float64 `json:"avg_minutes_played"`
}

func (q *Queries) CalclulateAverateByTeam(ctx context.Context) (CalclulateAverateByTeamRow, error) {
	row := q.db.QueryRow(ctx, calclulateAverateByTeam)
	var i CalclulateAverateByTeamRow
	err := row.Scan(
		&i.TeamName,
		&i.AvgPoints,
		&i.AvgRebounds,
		&i.AvgAssists,
		&i.AvgSteals,
		&i.AvgBlocks,
		&i.AvgFouls,
		&i.AvgTurnOvers,
		&i.AvgMinutesPlayed,
	)
	return i, err
}

const calculateAllTeamsAverage = `-- name: CalculateAllTeamsAverage :many
SELECT
    t.name AS team_name,
    AVG(gs.points) AS avg_points,
    AVG(gs.rebounds) AS avg_rebounds,
    AVG(gs.assists) AS avg_assists,
    AVG(gs.steals) AS avg_steals,
    AVG(gs.blocks) AS avg_blocks,
    AVG(gs.fouls) AS avg_fouls,
    AVG(gs.turn_overs) AS avg_turn_overs,
    AVG(gs.minutes_played) AS avg_minutes_played
FROM
    game_stats gs
        JOIN
    game g ON gs.game_id = g.id
        JOIN
    player p ON g.player_id = p.id
        JOIN
    teams t ON p.team_id = t.id
GROUP BY
    t.name
`

type CalculateAllTeamsAverageRow struct {
	TeamName         string  `json:"team_name"`
	AvgPoints        float64 `json:"avg_points"`
	AvgRebounds      float64 `json:"avg_rebounds"`
	AvgAssists       float64 `json:"avg_assists"`
	AvgSteals        float64 `json:"avg_steals"`
	AvgBlocks        float64 `json:"avg_blocks"`
	AvgFouls         float64 `json:"avg_fouls"`
	AvgTurnOvers     float64 `json:"avg_turn_overs"`
	AvgMinutesPlayed float64 `json:"avg_minutes_played"`
}

func (q *Queries) CalculateAllTeamsAverage(ctx context.Context) ([]CalculateAllTeamsAverageRow, error) {
	rows, err := q.db.Query(ctx, calculateAllTeamsAverage)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CalculateAllTeamsAverageRow{}
	for rows.Next() {
		var i CalculateAllTeamsAverageRow
		if err := rows.Scan(
			&i.TeamName,
			&i.AvgPoints,
			&i.AvgRebounds,
			&i.AvgAssists,
			&i.AvgSteals,
			&i.AvgBlocks,
			&i.AvgFouls,
			&i.AvgTurnOvers,
			&i.AvgMinutesPlayed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createTeam = `-- name: CreateTeam :one
INSERT INTO teams (
    id,
    name,
    created_at
) VALUES (
             $1, $2, NOW()
         ) RETURNING id, name, created_at, updated_at
`

type CreateTeamParams struct {
	ID   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

func (q *Queries) CreateTeam(ctx context.Context, arg CreateTeamParams) (Team, error) {
	row := q.db.QueryRow(ctx, createTeam, arg.ID, arg.Name)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllTeams = `-- name: GetAllTeams :many
SELECT id, name, created_at, updated_at FROM teams
`

func (q *Queries) GetAllTeams(ctx context.Context) ([]Team, error) {
	rows, err := q.db.Query(ctx, getAllTeams)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Team{}
	for rows.Next() {
		var i Team
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTeamById = `-- name: GetTeamById :one
SELECT id, name, created_at, updated_at FROM teams WHERE id = $1
`

func (q *Queries) GetTeamById(ctx context.Context, id uuid.UUID) (Team, error) {
	row := q.db.QueryRow(ctx, getTeamById, id)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTeamByName = `-- name: GetTeamByName :one
SELECT id, name, created_at, updated_at FROM teams WHERE name=$1
`

func (q *Queries) GetTeamByName(ctx context.Context, name string) (Team, error) {
	row := q.db.QueryRow(ctx, getTeamByName, name)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateTeam = `-- name: UpdateTeam :one
UPDATE teams
SET
    name = $2,
    updated_at = NOW()
WHERE id = $1
RETURNING id, name, created_at, updated_at
`

type UpdateTeamParams struct {
	ID   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

func (q *Queries) UpdateTeam(ctx context.Context, arg UpdateTeamParams) (Team, error) {
	row := q.db.QueryRow(ctx, updateTeam, arg.ID, arg.Name)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
